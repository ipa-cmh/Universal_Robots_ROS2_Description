<?xml version="1.0"?>
<robot xmlns:xacro="http://wiki.ros.org/xacro" name="$(arg name)">
   <!-- robot name parameter -->
   <xacro:arg name="name" default="ur"/>
   <!-- include arm -->
   <xacro:include filename="$(find ur_description)/urdf/ur_macro.xacro"/>
   <!-- include ros2 control -->
   <xacro:include filename="$(find ur_description)/urdf/ur.ros2_control.xacro" />
   <!-- include ros2_control hardware instantiation (for now, then migrate later to responsible packages) -->
   <xacro:include filename="$(find ur_description)/urdf/ur_hardware.xacro"/>

   <!-- possible 'ur_type' values: ur3, ur3e, ur5, ur5e, ur10, ur10e, ur16e -->
   <!-- the default value should raise an error in case this was called without defining the type -->
   <xacro:arg name="ur_type" default="ur5x"/>

   <!-- parameters -->
   <xacro:arg name="prefix" default="" />
   <xacro:arg name="joint_limit_params" default="$(find ur_description)/config/$(arg ur_type)/joint_limits.yaml"/>
   <xacro:arg name="kinematics_params" default="$(find ur_description)/config/$(arg ur_type)/default_kinematics.yaml"/>
   <xacro:arg name="physical_params" default="$(find ur_description)/config/$(arg ur_type)/physical_parameters.yaml"/>
   <xacro:arg name="visual_params" default="$(find ur_description)/config/$(arg ur_type)/visual_parameters.yaml"/>

   <xacro:arg name="transmission_hw_interface" default=""/>
   <xacro:arg name="safety_limits" default="false"/>
   <xacro:arg name="safety_pos_margin" default="0.15"/>
   <xacro:arg name="safety_k_position" default="20"/>
   <!-- ros2_control related parameters -->
   <xacro:arg name="headless_mode" default="false" />
   <xacro:arg name="robot_ip" default="0.0.0.0" />
   <xacro:arg name="script_filename" default=""/>
   <xacro:arg name="output_recipe_filename" default=""/>
   <xacro:arg name="input_recipe_filename" default=""/>
   <xacro:arg name="reverse_ip" default="0.0.0.0"/>
   <xacro:arg name="script_command_port" default="50004"/>
   <!--   tool communication related parameters-->
   <xacro:arg name="use_tool_communication" default="false" />
   <xacro:arg name="tool_voltage" default="0" />
   <xacro:arg name="tool_parity" default="0" />
   <xacro:arg name="tool_baud_rate" default="115200" />
   <xacro:arg name="tool_stop_bits" default="1" />
   <xacro:arg name="tool_rx_idle_chars" default="1.5" />
   <xacro:arg name="tool_tx_idle_chars" default="3.5" />
   <xacro:arg name="tool_device_name" default="/tmp/ttyUR" />
   <xacro:arg name="tool_tcp_port" default="54321" />

     <!-- Simulation parameters -->
   <xacro:arg name="use_fake_hardware" default="false" />
   <xacro:arg name="fake_sensor_commands" default="false" />
   <xacro:arg name="sim_gazebo" default="false" />
   <xacro:arg name="sim_ignition" default="false" />
   <xacro:arg name="simulation_controllers" default="" />

   <!-- initial position for simulations (Fake Hardware, Gazebo, Ignition) -->
   <xacro:arg name="initial_positions_file" default="$(find ur_description)/config/initial_positions.yaml"/>

   <!-- convert to property to use substitution in function -->
   <xacro:property name="initial_positions_file" default="$(arg initial_positions_file)"/>
   <xacro:property name="sim_gazebo" default="$(arg sim_gazebo)"/>
   <xacro:property name="sim_ignition" default="$(arg sim_ignition)"/>
   <xacro:property name="fake_hardware" default="$(arg use_fake_hardware)"/>


   <!-- create link fixed to the "world" -->
   <link name="world" />

   <!-- load model data -->
   <!-- This puts a bunch of named parameters in the top-level scope which are consumed inside later macros-->
   <!-- See https://github.com/ros/xacro/pull/105 -->
   <xacro:read_model_data
     joint_limits_parameters_file="$(arg joint_limit_params)"
     kinematics_parameters_file="$(arg kinematics_params)"
     physical_parameters_file="$(arg physical_params)"
     visual_parameters_file="$(arg visual_params)"
     force_abs_paths="${sim_gazebo or sim_ignition}"/>

   <!-- arm instance -->
   <xacro:ur_robot
     name="$(arg name)"
     prefix="$(arg prefix)"
     parent="world"
     safety_limits="$(arg safety_limits)"
     safety_pos_margin="$(arg safety_pos_margin)"
     safety_k_position="$(arg safety_k_position)"
     >
     <origin xyz="0 0 0" rpy="0 0 0" />          <!-- position robot in the world -->
   </xacro:ur_robot>

   <!-- ros2 control, if needed -->
   <!-- ur_description might eventually prepare fake/mock hardware only, delegating the <hardware> block to a consumer package -->
   <xacro:property name="needs_non_joint_interfaces" value="${not (sim_gazebo or sim_ignition)}"/>
   <!-- Kinematics hash comes from read_model_data -->
   <xacro:ur_ros2_control
      name="$(arg name)" prefix="$(arg prefix)"
      add_non_joint_interfaces="${needs_non_joint_interfaces}"
      initial_positions="${xacro.load_yaml(initial_positions_file)}"
      >
      <!-- dz: For now, I conditionally pass the right <hardware> as a block param. -->
      <!-- dz: Later, this wouldn't be necessary, a consumer package could create and pass it in its top-level xacro -->
         <ros2_control_hardware>
            <xacro:unless value="${sim_gazebo or sim_ignition or fake_hardware}">
               <xacro:ur_real_hardware_block
                  headless_mode="$(arg headless_mode)"
                  initial_positions="${xacro.load_yaml(initial_positions_file)}"
                  use_tool_communication="$(arg use_tool_communication)"
                  tool_voltage="$(arg tool_voltage)"
                  tool_parity="$(arg tool_parity)"
                  tool_baud_rate="$(arg tool_baud_rate)"
                  tool_stop_bits="$(arg tool_stop_bits)"
                  tool_rx_idle_chars="$(arg tool_rx_idle_chars)"
                  tool_tx_idle_chars="$(arg tool_tx_idle_chars)" 
                  tool_device_name="$(arg tool_device_name)" 
                  tool_tcp_port="$(arg tool_tcp_port)"
                  robot_ip="$(arg robot_ip)"
                  script_filename="$(arg script_filename)"
                  output_recipe_filename="$(arg output_recipe_filename)"
                  input_recipe_filename="$(arg input_recipe_filename)"
                  reverse_ip="$(arg reverse_ip)"
                  script_command_port="$(arg script_command_port)"
                  transmission_hw_interface="$(arg transmission_hw_interface)"
                  tf_prefix=""
                  hash_kinematics="${kinematics_hash}" 
               />
            </xacro:unless>
            <xacro:if value="${fake_hardware and not (sim_gazebo or sim_ignition)}">
               <hardware>
                  <plugin>mock_components/GenericSystem</plugin>
                  <param name="fake_sensor_commands">$(arg fake_sensor_commands)</param>
                  <param name="state_following_offset">0.0</param>
               </hardware>
            </xacro:if>
            <xacro:if value="${sim_gazebo}">
               <hardware>
                  <plugin>gazebo_ros2_control/GazeboSystem</plugin>
               </hardware>
            </xacro:if>
            <xacro:if value="${sim_ignition}">
               <hardware>
                  <plugin>ign_ros2_control/IgnitionSystem</plugin>
               </hardware>
            </xacro:if>
         </ros2_control_hardware>
   </xacro:ur_ros2_control>



   <!-- dz: These move to their respective simulation packages -->
   <xacro:if value="$(arg sim_gazebo)">
    <!-- Gazebo plugins -->
    <gazebo reference="world">
    </gazebo>
    <gazebo>
      <plugin filename="libgazebo_ros2_control.so" name="gazebo_ros2_control">
        <parameters>$(arg simulation_controllers)</parameters>
      </plugin>
    </gazebo>
  </xacro:if>

  <xacro:if value="$(arg sim_ignition)">
    <!-- Gazebo plugins -->
    <gazebo reference="world">
    </gazebo>
    <gazebo>
      <plugin filename="libign_ros2_control-system.so" name="ign_ros2_control::IgnitionROS2ControlPlugin">
        <parameters>$(arg simulation_controllers)</parameters>
        <controller_manager_node_name>$(arg prefix)controller_manager</controller_manager_node_name>
      </plugin>
    </gazebo>
  </xacro:if>

</robot>
